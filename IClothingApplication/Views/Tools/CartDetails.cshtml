@model IClothingApplication.Models.ShoppingCart

@{
    ViewBag.Title = "Details";
}

@{
    Decimal sum = 0;
    int total = 0;
    foreach (var item in Model.ItemWrapper)
    {
        sum += item.productQty * item.Product.productPrice;
        total += item.productQty;
    }
}

<div class="container my-4">
    <h2 class="text-center mb-3">Product Details</h2>
    <div class="card w-75 mx-auto my-auto">
        <div class="card-body">
            <h4 class="card-title text-center">@Html.DisplayFor(model => model.Customer.customerName)'s Order</h4>
            <hr />
            <p class="card-text">
                <strong>Status:</strong> @Html.DisplayFor(model => model.OrderStatus.status)<br>
                <strong>Date:</strong> $@Html.DisplayFor(model => model.OrderStatus.statusDate)<br>
                <strong>Payment:</strong> $@sum<br>
                <strong>Quantity: </strong> @total @(total == 1 ? "Item" : "Items")<br> 
                <strong>Sticker ID:</strong> @Html.DisplayFor(model => model.ItemDelivery.stickerID)<br />
                <strong>Sticker Date:</strong> @Html.DisplayFor(model => model.ItemDelivery.stickerDate)
            </p>
        </div>
    </div>
</div>

@{const int maxLength = 90;}

<div class="container">
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3">
        @foreach (var itemWrapper in Model.ItemWrapper)
        {
            IClothingApplication.Models.Product item = itemWrapper.Product;

            <div class="col mb-4">
                <div class="card" style="height: 700px">
                    <img style="height: 450px; object-fit: cover; border-radius: var(--bs-card-inner-border-radius) 0 0 var(--bs-card-inner-border-radius)" src="~/Images/@(System.IO.File.Exists(Server.MapPath("~/Images/Products/" + item.productName + ".jpg")) ? "Products/" + item.productName + ".jpg" : "placeholder.jpg")" class="card-img-top" alt="Card Image">
                    <div class="card-body d-grid">
                        @*<h5 class="card-title">@Html.ActionLink(item.productName, "Details", new { id = item.productID }, new { @class = "text-dark" })</h5>*@
                        <h5 class="card-title">@item.productName</h5>
                        <p class="card-text">@(item.productDescription.Length > maxLength ? item.productDescription.Substring(0, maxLength) + "..." : item.productDescription)</p>

                        <div class="d-grid" style="height: min-content; align-self: end;">
                            <div class="d-flex justify-content-between align-items-end p-1" style="height:min-content">
                                <span class="badge rounded-pill bg-secondary">@item.Category.categoryName</span>
                                <span class="badge rounded-pill bg-secondary">@item.Brand.brandName</span>
                            </div>
                            <div class="d-flex justify-content-between align-items-end p-1" style="height:min-content">
                                <span class="badge rounded-pill bg-success">$@item.productPrice</span>
                                    <span class="badge rounded-pill bg-primary">@item.productQty Bought</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="">
    @Html.ActionLink("Back to List", "AdminBillingManager", null, new { @class = "btn btn-secondary" })
</div>

<div class="my-4"></div>